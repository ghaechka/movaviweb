const http = require('http');
const { getPackedSettings } = require('http2');
const { url } = require('inspector');
const hostname = '127.0.0.1'; // IP 
const port = 3000; // порт

const server = http.createServer((req, res) => {
    // res.statusCode = 200; // статус сервера - OK
    // res.setHeader('Content-type', 'stext/plain');
   
    // 0. установите дополнительный заголовое X-Powered-By со значением myHeader. Найдите в документации, что это за заголовок и в комментариях опишите его свойства.
    // Напишите строку, которая в качестве ответа сервера установит статус ответа 404. 

    console.log(req.headers['host'])
    console.log(req.url) // получаем заголовки от пользователя
    console.log(req.method) // метод обращения от пользователя

    res.end();

//     1. Обработать адрес пользователя.Установить заголовок сервера 200, если после последнего символа / нет ничего(то есть главная страница) и вывести "Добро пожаловать!".Подсказка: длина адреса будет равна 1 символу.
// 2. Если будет какой - то другой адрес, установите заголовок сервера в 404, пользователю верните сообщение "Такой страницы не существует" в виде заголовка h1.
// 3 *.Создать текстовый файл.Туда написать небольшую html - страницу приветствия в виде:
//     Добро пожаловать на мой сайт! - заголовок
// ... - описание(впишите свое)
// Добавьте подпись
// Выгрузите информацию со страницы, если это главная страница(просто / )
// "metanit работа с файлами nodejs"
// 4 **. Создайте несколько html страниц, about.html, index.html, contact.html. Наполните их (о сайте, главная и контакты соответственно). Сделайте так, чтобы по заходу на URL, например, /contact, открывалась соответствующая страница. ПРоверяйте с помощью условия, какая конкретно страница была открыта. 
// 5**. Переделайте программу так, чтобы пользователь не писал адрес вместе с расширением файла. Напишите переменную. которая бы составляла адрес до нужной страницы в файлах. Сами html-файлы переместите в папку pages, и, соотвтетственно, обращайтесь к ней, ккогда собираетесь открыть очередную страницу. 
// /contacts => /pages/contacts.html 
let url = req.url;
let file = 'pages' + url + '.html'
// 6**. На страницах добавить навигацию (меню со ссылками на страницы). В ссылках указывать только /contacts, например.
// 7***. Открытие страницы вынесите в отдельную функцию. Назовите эту функцию getPage. На вход она должна принимать 3 аргумента: имя страницу, response (переменная res, ответ сервера), и statusCode со значением по умолчанию 200. ПРимер:
// function getPage(name, response, statusCode=200) {}
// 8*****. Напишите функцию-генератор страницы. Создайте в отдельном документе заголовок странице (чтбы там был только тег header), подвал (footer). Само содержимое страницы должно быть в основном документе и назодиться в теге main. Соединяйте их на стороне сервера. 




    let url = req.url; // /
    if (url.length == 1){
        res.writeHead(200, { 'Content-Type': 'text/html', });
        res.write('<b>Hello, World!\n</b>')
    }


})
// обработка запросов
// req (request) - запрос от пользователя
// res (response) - ответ от сервера

server.listen(port, hostname, () => {
    console.log('Server is running!')
})
// включение сервера по проту и IP